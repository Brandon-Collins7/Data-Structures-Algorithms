    //////////////////////////////////////
    // Breadth-first search with memory //
    //////////////////////////////////////

    /**
     * Initializes all to unvisited and launches a breadth-first
     * search in the current maze starting at position (x,y)
     * with goal position (gx, gy).
     */
    public void breadthFirstMemory(int x, int y, int gx, int gy) {
        markAllUnvisited();
        Position start = new Position(x, y);
        goalPosition = new Position(gx, gy);
        if (isValid(start)) {
            order = 1;
            bfsMemory(start);
        }
    }

    /**
     * Search the current maze using breadth-first search. This algorithm is
     * identical to the breadth-first search above, except for the addition of
     * memory. Positions are added to the queue wrapped in a node, which is linked
     * to a node containing the position's immediately preceeding neighbor; that is,
     * the neighbor responsible for having this position added to the queue.
     */
    private void bfsMemory(Position start) {
        Deque<Node> queue = new ArrayDeque<>();
        visit(start);
        if (process(start)) {
            return;
        }
        queue.addLast(new Node(start, null));
        while (!queue.isEmpty()) {
            Node n = queue.removeFirst();
            Position position = n.position;
            for (Position neighbor : position.neighbors()) {
                if (!isVisited(neighbor)) {
                    visit(neighbor);
                    if (process(neighbor)) {
                        return;
                    }
                    queue.addLast(new Node(neighbor, n));
                }
            }
        }
    }


    /**
     * Constructs a node for linking positions together.
     */
    private class Node {
        Position position;
        Node predecessor;

        public Node(Position p, Node pred) {
            position = p;
            predecessor = pred;
        }
    }